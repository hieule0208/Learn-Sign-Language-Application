import 'dart:developer';

import 'package:hooks_riverpod/hooks_riverpod.dart';
import 'package:how_to_use_provider/models/data_models/data_learn_model.dart';
import 'package:how_to_use_provider/models/data_models/preload_model.dart';
import 'package:how_to_use_provider/screens/learn_page/sub_page/result_page/controller/result_page_provider.dart';
import 'package:how_to_use_provider/services/api_services.dart';
import 'package:video_player/video_player.dart';

// --- LearnDataStateNotifier (Kh√¥ng thay ƒë·ªïi) ---
// Qu·∫£n l√Ω vi·ªác t√¨m n·∫°p v√† l∆∞u tr·ªØ d·ªØ li·ªáu h·ªçc t·∫≠p t·ª´ API
class LearnDataStateNotifier extends StateNotifier<List<DataLearnModel>> {
  final Ref ref;
  LearnDataStateNotifier(this.ref) : super([]) {
    initialize();
  }

  Future<void> initialize() async {
    log('‚ñ∂Ô∏è Initializing...', name: 'LearnDataStateNotifier');
    try {
      final apiService = ApiServices();
      state = await apiService.fetchLearnData();
      log('‚úÖ Fetched data successfully. Count: ${state.length}', name: 'LearnDataStateNotifier');

      final studyItems = state.where((item) => item.type == 'study').toList();
      ref.read(amountNewWordProvider.notifier).set(studyItems.length);
      log('Updated amountNewWord: ${studyItems.length}', name: 'LearnDataStateNotifier');

      if (state.isNotEmpty) {
        ref.read(questionProvider.notifier).set(state[0]);
        log('Set first question: ${state[0].word.word}', name: 'LearnDataStateNotifier');
      } else {
        log('‚ö†Ô∏è Data state is empty, cannot set first question.', name: 'LearnDataStateNotifier');
      }

      log('Updating URL list for preloading...', name: 'LearnDataStateNotifier');
      await ref.read(preloadStateProvider.notifier).updateUrlsAndInitialize(
            state.map((item) => item.mainContent ?? '').toList(),
          );
      log('‚úÖ Initialization complete.', name: 'LearnDataStateNotifier');
    } catch (e, stack) {
      log('‚ùå Error initializing', name: 'LearnDataStateNotifier', error: e, stackTrace: stack);
      state = [];
    }
  }

  void reset() {
    log('üîÅ Resetting state to empty list.', name: 'LearnDataStateNotifier');
    state = [];
  }
}

final learnDataStateProvider = StateNotifierProvider<LearnDataStateNotifier, List<DataLearnModel>>(
  (ref) => LearnDataStateNotifier(ref),
);

// --- IndexQuestionNotifier (Kh√¥ng thay ƒë·ªïi) ---
// Theo d√µi ch·ªâ m·ª•c c·ªßa c√¢u h·ªèi hi·ªán t·∫°i
class IndexQuestionNotifier extends StateNotifier<int> {
  final Ref ref;
  IndexQuestionNotifier(this.ref) : super(0);

  void increment() {
    final newIndex = state + 1;
    log('‚ñ∂Ô∏è Incrementing index to: $newIndex', name: 'IndexQuestionNotifier');
    state = newIndex;

    final learnData = ref.read(learnDataStateProvider);
    if (learnData.isNotEmpty && state < learnData.length) {
      ref.read(questionProvider.notifier).set(learnData[state]);
      log('‚úÖ Set question at index $state: ${learnData[state].word.word}', name: 'IndexQuestionNotifier');
      ref.read(preloadStateProvider.notifier).changeVideoIndex(state);
    } else {
      log(
        '‚ö†Ô∏è Invalid state: learnData empty or index out of range. Index: $state, Data length: ${learnData.length}',
        name: 'IndexQuestionNotifier',
      );
    }
  }

  void reset() {
    log('üîÅ Resetting index to 0', name: 'IndexQuestionNotifier');
    state = 0;
  }
}

final indexQuestionProvider = StateNotifierProvider<IndexQuestionNotifier, int>(
  (ref) => IndexQuestionNotifier(ref),
);

// --- PreloadStateNotifier (ƒê√É VI·∫æT L·∫†I) ---
// Qu·∫£n l√Ω vi·ªác t·∫£i tr∆∞·ªõc, ph√°t v√† h·ªßy c√°c video controller
class PreloadStateNotifier extends StateNotifier<PreloadModel> {
  final Ref ref;
  PreloadStateNotifier(this.ref)
      // S·ª≠ d·ª•ng `VideoPlayerController?` ƒë·ªÉ cho ph√©p gi√° tr·ªã null
      : super(PreloadModel(urls: [], controllers: {}, focusedIndex: 0));

  Future<void> updateUrlsAndInitialize(List<String> newUrls) async {
    log('‚ñ∂Ô∏è updateUrlsAndInitialize: newUrls length = ${newUrls.length}', name: 'PreloadStateNotifier');
    // H·ªßy c√°c controller c≈© tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu
    _disposeAllControllers();
    state = state.copyWith(urls: newUrls, focusedIndex: 0, controllers: {});
    await initialize();
    log('‚úÖ updateUrlsAndInitialize DONE: focusedIndex = ${state.focusedIndex}', name: 'PreloadStateNotifier');
  }

  Future<void> initialize() async {
    log('‚ñ∂Ô∏è initialize: focusedIndex = ${state.focusedIndex}', name: 'PreloadStateNotifier');
    // Kh·ªüi t·∫°o controller cho video ƒë·∫ßu ti√™n (index 0), ngay c·∫£ khi n√≥ kh√¥ng c√≥ video (s·∫Ω l√† null)
    await _initializeControllerAtIndex(0);
    // Preload video th·ª© hai (index 1)
    await _initializeControllerAtIndex(1);
    log('‚úÖ initialize DONE: controllers = ${state.controllers.keys}', name: 'PreloadStateNotifier');
  }

  void changeVideoIndex(int index) {
    log('‚ñ∂Ô∏è changeVideoIndex: newIndex = $index, current focusedIndex = ${state.focusedIndex}', name: 'PreloadStateNotifier');
    if (index == state.focusedIndex) {
      log('‚ö†Ô∏è Index unchanged: $index, no action needed', name: 'PreloadStateNotifier');
      return;
    }

    if (index > state.focusedIndex) {
      log('Moving forward from ${state.focusedIndex} to $index', name: 'PreloadStateNotifier');
      _playNext(index);
    } else {
      log('Moving backward from ${state.focusedIndex} to $index', name: 'PreloadStateNotifier');
      _playPrevious(index);
    }
    state = state.copyWith(focusedIndex: index);
    log('‚úÖ changeVideoIndex DONE: new focusedIndex = ${state.focusedIndex}, controllers = ${state.controllers.keys}', name: 'PreloadStateNotifier');
  }

  void _playNext(int index) {
    log('‚ñ∂Ô∏è _playNext: index = $index', name: 'PreloadStateNotifier');
    _stopControllerAtIndex(index - 1);
    _disposeControllerAtIndex(index - 2);
    _playControllerAtIndex(index);
    _initializeControllerAtIndex(index + 1);
  }

  void _playPrevious(int index) {
    log('‚ñ∂Ô∏è _playPrevious: index = $index', name: 'PreloadStateNotifier');
    _stopControllerAtIndex(index + 1);
    _disposeControllerAtIndex(index + 2);
    _playControllerAtIndex(index);
    _initializeControllerAtIndex(index - 1);
  }

  void _playControllerAtIndex(int index) {
    // Lu√¥n ki·ªÉm tra xem key c√≥ t·ªìn t·∫°i kh√¥ng tr∆∞·ªõc khi truy c·∫≠p
    if (state.controllers.containsKey(index)) {
      final VideoPlayerController? controller = state.controllers[index];
      // S·ª≠ d·ª•ng `?.` ƒë·ªÉ g·ªçi play m·ªôt c√°ch an to√†n
      controller?.play();
      if (controller != null) log('üöÄüöÄüöÄ PLAYING $index');
    }
  }

  Future<void> _initializeControllerAtIndex(int index) async {
    // Ki·ªÉm tra gi·ªõi h·∫°n v√† s·ª± t·ªìn t·∫°i tr∆∞·ªõc
    if (index < 0 || index >= state.urls.length || state.controllers.containsKey(index)) {
      return;
    }

    final newControllers = Map<int, VideoPlayerController?>.from(state.controllers);
    final url = state.urls[index];

    if (url.isNotEmpty) {
      // N·∫øu c√≥ URL, t·∫°o controller
      log('‚ñ∂Ô∏è Initializing controller for index $index', name: 'PreloadStateNotifier');
      try {
        final controller = VideoPlayerController.networkUrl(Uri.parse(url));
        newControllers[index] = controller;
        state = state.copyWith(controllers: newControllers);
        await controller.initialize();
        log('‚úÖ INITIALIZED $index', name: 'PreloadStateNotifier');
      } catch (e, stack) {
        log('‚ùå ERROR INITIALIZING $index', name: 'PreloadStateNotifier', error: e, stackTrace: stack);
        // N·∫øu l·ªói, x√≥a key ƒë·ªÉ c√≥ th·ªÉ th·ª≠ l·∫°i sau
        newControllers.remove(index);
        state = state.copyWith(controllers: newControllers);
      }
    } else {
      // N·∫øu URL r·ªóng, ƒë√°nh d·∫•u index n√†y l√† kh√¥ng c√≥ video b·∫±ng c√°ch ƒë·∫∑t l√† null
      log('‚ÑπÔ∏è No video for index $index. Setting controller to null.', name: 'PreloadStateNotifier');
      newControllers[index] = null;
      state = state.copyWith(controllers: newControllers);
    }
  }

  void _stopControllerAtIndex(int index) {
    if (state.controllers.containsKey(index)) {
      final controller = state.controllers[index];
      // S·ª≠ d·ª•ng `?.` ƒë·ªÉ thao t√°c m·ªôt c√°ch an to√†n
      controller?.pause();
      controller?.seekTo(const Duration());
      if (controller != null) log('‚èπ STOPPED $index', name: 'PreloadStateNotifier');
    }
  }

  void _disposeControllerAtIndex(int index) {
    if (state.controllers.containsKey(index)) {
      final controller = state.controllers[index];
      // S·ª≠ d·ª•ng `?.` ƒë·ªÉ h·ªßy m·ªôt c√°ch an to√†n
      controller?.dispose();
      final newControllers = Map<int, VideoPlayerController?>.from(state.controllers)..remove(index);
      state = state.copyWith(controllers: newControllers);
      log('üóë DISPOSED $index', name: 'PreloadStateNotifier');
    }
  }
  
  void _disposeAllControllers() {
    log('üîÅ Disposing ALL controllers...', name: 'PreloadStateNotifier');
    for (final controller in state.controllers.values) {
      controller?.dispose();
    }
    log('‚úÖ All controllers disposed.', name: 'PreloadStateNotifier');
  }

  @override
  void dispose() {
    _disposeAllControllers();
    super.dispose();
  }

  void reset() {
    log('üîÅ Resetting PreloadState.', name: 'PreloadStateNotifier');
    _disposeAllControllers();
    state = PreloadModel(urls: [], controllers: {}, focusedIndex: 0);
  }
}

final preloadStateProvider = StateNotifierProvider<PreloadStateNotifier, PreloadModel>((ref) {
  return PreloadStateNotifier(ref);
});

// --- QuestionNotifier (Kh√¥ng thay ƒë·ªïi) ---
// Theo d√µi c√¢u h·ªèi hi·ªán t·∫°i
class QuestionNotifier extends StateNotifier<DataLearnModel?> {
  QuestionNotifier() : super(null);

  void set(DataLearnModel question) {
    log('Set question: ID = ${question.word.word}', name: 'QuestionNotifier');
    state = question;
  }

  void reset() {
    log('Reset question to null', name: 'QuestionNotifier');
    state = null;
  }
}

final questionProvider = StateNotifierProvider<QuestionNotifier, DataLearnModel?>(
  (ref) => QuestionNotifier(),
);